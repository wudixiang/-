import turtle
import time
from threading import Thread
def drawSnake(rad, angle, len, neckrad):
    for i in range(len):
        turtle.circle(rad, angle)
        turtle.circle(-rad, angle)
    turtle.circle(rad, angle/2)
    turtle.fd(rad)
    turtle.circle(neckrad+1, 180)
    turtle.fd(rad*2/3)


# 笔画分块
def drawHline(dr, len)
    # 向左画横
    if dr == 0
        turtle.fd(len)
    # 向右画横
    if dr == 1
        turtle.backward(len)


def drawVline(dr, len):
    # 向下画竖
    if dr == 0:
        turtle.seth(270)
        turtle.fd(len)
        turtle.seth(0)
    # 向上画竖
    if dr == 1:
        turtle.seth(90)
        turtle.fd(len)
        turtle.seth(0)


def drawTurn(dr, radius, rad):
    turtle.seth(270)
    # 画右撇
    if dr == 0:
        turtle.circle(-radius, rad)
        turtle.seth(0)
    # 画左撇
    if dr == 1:
        turtle.circle(radius, rad)
        turtle.seth(0)


# 进度条
def drawProcess(num, s):
    for i in range(num)
        sign = '#' * i
        time.sleep(s)
        print("\r{} {:2}%".format(sign, i), end=" ")


def init_pen():
    turtle.reset()
    turtle.setup(1300, 800, 0, 0)
    pythonsize = 20
    turtle.pensize(pythonsize)
    turtle.pencolor("green")
    turtle.speed(5)
    turtle.seth(0)
    # drawHline(0,50)
    # drawHline(1,50)
    # drawVline(0,50)
    # drawVline(1,50)
    # drawTurn(0,120,60)
    # drawTurn(1,120,60)
    # drawcharacter(50,90,120,-60)
    # turtle.write("翔",move=False, align="left",font=("宋体",30,"normal"))


def drawBig():
    start = time.perf_counter()
    # for i in range(101):
    #   sign='#'*i
    #   print("\r{} {:2}%".format(sign,i), end=" ")
    init_pen()
    drawHline(0, 200)
    turtle.penup()
    turtle.goto(110, 80)
    turtle.pendown()
    drawTurn(0, 280, 50)
    turtle.penup()
    turtle.goto(110, 0)
    turtle.pendown()
    drawTurn(1, 200, 50)
    # turtle.exitonclick()
    # turtle.bye()
    end = time.perf_counter()
    print('运行时间 : %s 秒' % (end - start))
    turtle.done()

def drawBigtime():
  t1 = Thread(target=drawProcess, args=(101, 0.015))
  t2 = Thread(target=drawBig, args=())
  t1.start()
  t2.start()

import binascii

def myhash(x):
    str_16 = binascii.b2a_hex(x.encode('utf-8'))  # 字符串转16进制
    print('哈希值为：',str_16)


import turtle
import datetime
color = "black"
font1 = 'Arial'
def init_pen():
    turtle.reset()
    turtle.setup(1300, 2000, -500, 0)
    pythonsize = 5
    turtle.pensize(pythonsize)
    turtle.pencolor(color)
    turtle.speed(5)
    turtle.seth(0)
def drawGap(): # 绘制数码管间隔
   turtle.penup()
   turtle.fd(5)
def drawLine(draw):     #绘制数码管的每一段
    drawGap()
    if(draw):
        turtle.down()
    else:
        turtle.up()

    turtle.fd(40)
    drawGap()
    turtle.right(90)

def drawDigit(i):      #绘制数码管的每个数字
    if i in [2,3,4,5,6,8,9,'A','B','D','E','F']:      #g管
        drawLine(True)
    else:
        drawLine(False)

    if i in [0,1,3,4,5,6,7,8,9,'A','B','D']:  #c管
        drawLine(True)
    else:
        drawLine(False)

    if i in [0,2,3,5,6,8,9,'B','C','D','E']:        #d管
        drawLine(True)
    else:
        drawLine(False)

    if i in [0,2,6,8,'A','B','C','D','E','F']:            #e管
        drawLine(True)
    else:
        drawLine(False)

    turtle.left(90)

    if i in [0,4,5,6,8,9,'A','B','C','E','F']:        #f管
        drawLine(True)
    else:
        drawLine(False)

    if i in [0,2,3,5,6,7,8,9,'A','C','E','F']:    #a管
        drawLine(True)
    else:
        drawLine(False)

    if i in [0,1,2,3,4,7,8,9,'A','D']:    #b管
        drawLine(True)
    else:
        drawLine(False)

    turtle.right(180)
    turtle.penup()
    turtle.fd(20)


def drawData(date):
    for i in date:
        drawDigit(eval(i))

def drawDate(time):     #绘制日期
    for i in time:
        if i == '年':
            turtle.write('年',font=(font1, 30, "normal"))
            turtle.fd(50)
            # turtle.pencolor("green")
        elif i == '月':
            turtle.write('月',font=(font1, 30, "normal"))
            # turtle.pencolor("blue")
            turtle.fd(50)
        elif i == '日':
            turtle.write('日',font=(font1, 30, "normal"))
            turtle.fd(50)
        elif i in ['0','1','2','3','4','5','6','7','8','9']:
            drawDigit(eval(i))
        else:
            print('未按标准格式输入日期，请重新输入')
            drawDate(input('请输入日期：（格式为2021年6月23日）'))
def chooseColor():
    global color
    try:
      color = input('请输入想要的颜色：')
      turtle.pencolor(color)
    except:
        print('没有这种颜色，请重新输入颜色')
        chooseColor()

def chooseFont():
    global font1
    try:
      font1 = input('请输入想要的字体：')
    except:
        print('没有这种字体，请重新输入字体')
        chooseFont()

def showMenu():

    print('***********七段数码管显示菜单************')
    print('1.显示输入的日期')
    print('2.显示当前系统时间')
    print('3.显示任意数字')
    print('4.调整字体')
    print('5.调整画笔颜色')
    print('*************************************')
    choice = input('请选择-->')
    if choice == '1':
        init_pen()
        drawDate(input('请输入日期：（格式为2021年6月23日）'))
    elif choice == '2':
        init_pen()
        drawDate(datetime.datetime.now().strftime('%Y年%m月%d日'))
    elif choice == '3':
       try:
         num = input("请输入任意个数字：")
         print(num)
         init_pen()
         drawData(num)
       except NameError:
         print("输入错误，请输入数字！")
         num = input("请输入任意个数字：")
         print(num)
         init_pen()
         drawData(num)


    # init_pen()
    # drawData('1')
    # drawDate(datetime.datetime.now().strftime('%Y年%m月%d日'))
    # turtle.done()
    # turtle.exitonclick()

import SevenDigital
import draw
import hash
import datetime

def run():
    while(1):
        print(datetime.datetime.now().strftime('%Y年%m月%d日'))
        print('**************************************')
        print('现代编程技术课程作业')
        print('1.哈希函数')
        print('2.绘图程序')
        print('3.七段数码管显示')
        print('4.结束')
        print('**************************************')
        choice=input('请选择->')
        if choice == '1':
            x=input('请输入需要加密内容：')
            hash.myhash(x)
        elif choice == '2':
            draw.drawBigtime()
        elif choice == '3':
            SevenDigital.showMenu()
        elif choice == '4':
            print("谢谢使用，下次再见")
            break
        else:
            print("输入无效，请重新选择")
            run()

# 按间距中的绿色按钮以运行脚本。
if __name__ == '__main__':
    run()


